{
  "Resources": {
    "main7AD10839": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "Name",
            "Value": "arbitrage-app/main"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "arbitrage-app/main/Resource"
      }
    },
    "mainPublicSubnet1SubnetDCE79C8E": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.0.0/18",
        "VpcId": {
          "Ref": "main7AD10839"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": "arbitrage-app/main/PublicSubnet1"
          },
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "arbitrage-app/main/PublicSubnet1/Subnet"
      }
    },
    "mainPublicSubnet1RouteTable5BABB2B1": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "main7AD10839"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "arbitrage-app/main/PublicSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "arbitrage-app/main/PublicSubnet1/RouteTable"
      }
    },
    "mainPublicSubnet1RouteTableAssociation3927CC8F": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "mainPublicSubnet1RouteTable5BABB2B1"
        },
        "SubnetId": {
          "Ref": "mainPublicSubnet1SubnetDCE79C8E"
        }
      },
      "Metadata": {
        "aws:cdk:path": "arbitrage-app/main/PublicSubnet1/RouteTableAssociation"
      }
    },
    "mainPublicSubnet1DefaultRoute19ACD332": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "mainPublicSubnet1RouteTable5BABB2B1"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "mainIGWD130CE0F"
        }
      },
      "DependsOn": [
        "mainVPCGWE618EEE2"
      ],
      "Metadata": {
        "aws:cdk:path": "arbitrage-app/main/PublicSubnet1/DefaultRoute"
      }
    },
    "mainPublicSubnet1EIP6679EEDE": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      },
      "Metadata": {
        "aws:cdk:path": "arbitrage-app/main/PublicSubnet1/EIP"
      }
    },
    "mainPublicSubnet1NATGateway0E03B6E2": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "mainPublicSubnet1EIP6679EEDE",
            "AllocationId"
          ]
        },
        "SubnetId": {
          "Ref": "mainPublicSubnet1SubnetDCE79C8E"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "arbitrage-app/main/PublicSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "arbitrage-app/main/PublicSubnet1/NATGateway"
      }
    },
    "mainPublicSubnet2SubnetE48F3746": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.64.0/18",
        "VpcId": {
          "Ref": "main7AD10839"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": "arbitrage-app/main/PublicSubnet2"
          },
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "arbitrage-app/main/PublicSubnet2/Subnet"
      }
    },
    "mainPublicSubnet2RouteTable532C46E2": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "main7AD10839"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "arbitrage-app/main/PublicSubnet2"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "arbitrage-app/main/PublicSubnet2/RouteTable"
      }
    },
    "mainPublicSubnet2RouteTableAssociation142B8CF1": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "mainPublicSubnet2RouteTable532C46E2"
        },
        "SubnetId": {
          "Ref": "mainPublicSubnet2SubnetE48F3746"
        }
      },
      "Metadata": {
        "aws:cdk:path": "arbitrage-app/main/PublicSubnet2/RouteTableAssociation"
      }
    },
    "mainPublicSubnet2DefaultRoute092A28A0": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "mainPublicSubnet2RouteTable532C46E2"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "mainIGWD130CE0F"
        }
      },
      "DependsOn": [
        "mainVPCGWE618EEE2"
      ],
      "Metadata": {
        "aws:cdk:path": "arbitrage-app/main/PublicSubnet2/DefaultRoute"
      }
    },
    "mainPublicSubnet2EIP2DD4861B": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      },
      "Metadata": {
        "aws:cdk:path": "arbitrage-app/main/PublicSubnet2/EIP"
      }
    },
    "mainPublicSubnet2NATGateway4F9570F4": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "mainPublicSubnet2EIP2DD4861B",
            "AllocationId"
          ]
        },
        "SubnetId": {
          "Ref": "mainPublicSubnet2SubnetE48F3746"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "arbitrage-app/main/PublicSubnet2"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "arbitrage-app/main/PublicSubnet2/NATGateway"
      }
    },
    "mainPrivateSubnet1SubnetB6B9C187": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.128.0/18",
        "VpcId": {
          "Ref": "main7AD10839"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "Name",
            "Value": "arbitrage-app/main/PrivateSubnet1"
          },
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "arbitrage-app/main/PrivateSubnet1/Subnet"
      }
    },
    "mainPrivateSubnet1RouteTableC553D8B7": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "main7AD10839"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "arbitrage-app/main/PrivateSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "arbitrage-app/main/PrivateSubnet1/RouteTable"
      }
    },
    "mainPrivateSubnet1RouteTableAssociation22AAF4EB": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "mainPrivateSubnet1RouteTableC553D8B7"
        },
        "SubnetId": {
          "Ref": "mainPrivateSubnet1SubnetB6B9C187"
        }
      },
      "Metadata": {
        "aws:cdk:path": "arbitrage-app/main/PrivateSubnet1/RouteTableAssociation"
      }
    },
    "mainPrivateSubnet1DefaultRoute06BBF3A6": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "mainPrivateSubnet1RouteTableC553D8B7"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "mainPublicSubnet1NATGateway0E03B6E2"
        }
      },
      "Metadata": {
        "aws:cdk:path": "arbitrage-app/main/PrivateSubnet1/DefaultRoute"
      }
    },
    "mainPrivateSubnet2Subnet8C2BD354": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.192.0/18",
        "VpcId": {
          "Ref": "main7AD10839"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "Name",
            "Value": "arbitrage-app/main/PrivateSubnet2"
          },
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "arbitrage-app/main/PrivateSubnet2/Subnet"
      }
    },
    "mainPrivateSubnet2RouteTable90767E4C": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "main7AD10839"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "arbitrage-app/main/PrivateSubnet2"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "arbitrage-app/main/PrivateSubnet2/RouteTable"
      }
    },
    "mainPrivateSubnet2RouteTableAssociation83DDDC2E": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "mainPrivateSubnet2RouteTable90767E4C"
        },
        "SubnetId": {
          "Ref": "mainPrivateSubnet2Subnet8C2BD354"
        }
      },
      "Metadata": {
        "aws:cdk:path": "arbitrage-app/main/PrivateSubnet2/RouteTableAssociation"
      }
    },
    "mainPrivateSubnet2DefaultRoute67ACDAB2": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "mainPrivateSubnet2RouteTable90767E4C"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "mainPublicSubnet2NATGateway4F9570F4"
        }
      },
      "Metadata": {
        "aws:cdk:path": "arbitrage-app/main/PrivateSubnet2/DefaultRoute"
      }
    },
    "mainIGWD130CE0F": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "arbitrage-app/main"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "arbitrage-app/main/IGW"
      }
    },
    "mainVPCGWE618EEE2": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "main7AD10839"
        },
        "InternetGatewayId": {
          "Ref": "mainIGWD130CE0F"
        }
      },
      "Metadata": {
        "aws:cdk:path": "arbitrage-app/main/VPCGW"
      }
    },
    "arbitrageworkers7033142A": {
      "Type": "AWS::ECS::Cluster",
      "Metadata": {
        "aws:cdk:path": "arbitrage-app/arbitrage-workers/Resource"
      }
    },
    "arbitrageworkersarbitrageworkersasgInstanceSecurityGroup68697C74": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "arbitrage-app/arbitrage-workers/arbitrage-workers-asg/InstanceSecurityGroup",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1"
          }
        ],
        "SecurityGroupIngress": [],
        "Tags": [
          {
            "Key": "Name",
            "Value": "arbitrage-app/arbitrage-workers/arbitrage-workers-asg"
          }
        ],
        "VpcId": {
          "Ref": "main7AD10839"
        }
      },
      "Metadata": {
        "aws:cdk:path": "arbitrage-app/arbitrage-workers/arbitrage-workers-asg/InstanceSecurityGroup/Resource"
      }
    },
    "arbitrageworkersarbitrageworkersasgInstanceRole4523BB5D": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::Join": [
                    "",
                    [
                      "ec2.",
                      {
                        "Ref": "AWS::URLSuffix"
                      }
                    ]
                  ]
                }
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Metadata": {
        "aws:cdk:path": "arbitrage-app/arbitrage-workers/arbitrage-workers-asg/InstanceRole/Resource"
      }
    },
    "arbitrageworkersarbitrageworkersasgInstanceRoleDefaultPolicyAD2141CF": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ecs:CreateCluster",
                "ecs:DeregisterContainerInstance",
                "ecs:DiscoverPollEndpoint",
                "ecs:Poll",
                "ecs:RegisterContainerInstance",
                "ecs:StartTelemetrySession",
                "ecs:Submit*",
                "ecr:GetAuthorizationToken",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "arbitrageworkersarbitrageworkersasgInstanceRoleDefaultPolicyAD2141CF",
        "Roles": [
          {
            "Ref": "arbitrageworkersarbitrageworkersasgInstanceRole4523BB5D"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "arbitrage-app/arbitrage-workers/arbitrage-workers-asg/InstanceRole/DefaultPolicy/Resource"
      }
    },
    "arbitrageworkersarbitrageworkersasgInstanceProfile5E9C33F1": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [
          {
            "Ref": "arbitrageworkersarbitrageworkersasgInstanceRole4523BB5D"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "arbitrage-app/arbitrage-workers/arbitrage-workers-asg/InstanceProfile"
      }
    },
    "arbitrageworkersarbitrageworkersasgLaunchConfigE3663C7A": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId": {
          "Ref": "SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter"
        },
        "InstanceType": "t2.micro",
        "AssociatePublicIpAddress": false,
        "IamInstanceProfile": {
          "Ref": "arbitrageworkersarbitrageworkersasgInstanceProfile5E9C33F1"
        },
        "SecurityGroups": [
          {
            "Fn::GetAtt": [
              "arbitrageworkersarbitrageworkersasgInstanceSecurityGroup68697C74",
              "GroupId"
            ]
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\necho ECS_CLUSTER=",
                {
                  "Ref": "arbitrageworkers7033142A"
                },
                " >> /etc/ecs/ecs.config\nsudo iptables --insert FORWARD 1 --in-interface docker+ --destination 169.254.169.254/32 --jump DROP\nsudo service iptables save\necho ECS_AWSVPC_BLOCK_IMDS=true >> /etc/ecs/ecs.config"
              ]
            ]
          }
        }
      },
      "DependsOn": [
        "arbitrageworkersarbitrageworkersasgInstanceRoleDefaultPolicyAD2141CF",
        "arbitrageworkersarbitrageworkersasgInstanceRole4523BB5D"
      ],
      "Metadata": {
        "aws:cdk:path": "arbitrage-app/arbitrage-workers/arbitrage-workers-asg/LaunchConfig"
      }
    },
    "arbitrageworkersarbitrageworkersasgASGD8AB35C8": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "MaxSize": "1",
        "MinSize": "1",
        "DesiredCapacity": "1",
        "LaunchConfigurationName": {
          "Ref": "arbitrageworkersarbitrageworkersasgLaunchConfigE3663C7A"
        },
        "Tags": [
          {
            "Key": "Name",
            "PropagateAtLaunch": true,
            "Value": "arbitrage-app/arbitrage-workers/arbitrage-workers-asg"
          }
        ],
        "VPCZoneIdentifier": [
          {
            "Ref": "mainPrivateSubnet1SubnetB6B9C187"
          },
          {
            "Ref": "mainPrivateSubnet2Subnet8C2BD354"
          }
        ]
      },
      "UpdatePolicy": {
        "AutoScalingReplacingUpdate": {
          "WillReplace": true
        },
        "AutoScalingScheduledAction": {
          "IgnoreUnmodifiedGroupSizeProperties": true
        }
      },
      "Metadata": {
        "aws:cdk:path": "arbitrage-app/arbitrage-workers/arbitrage-workers-asg/ASG"
      }
    },
    "arbitrageworkersarbitrageworkersasgDrainECSHookFunctionServiceRoleFDC9E155": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::Join": [
                    "",
                    [
                      "lambda.",
                      {
                        "Ref": "AWS::URLSuffix"
                      }
                    ]
                  ]
                }
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "arbitrage-app/arbitrage-workers/arbitrage-workers-asg/DrainECSHook/Function/ServiceRole/Resource"
      }
    },
    "arbitrageworkersarbitrageworkersasgDrainECSHookFunctionServiceRoleDefaultPolicyACA808BA": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ec2:DescribeInstances",
                "ec2:DescribeInstanceAttribute",
                "ec2:DescribeInstanceStatus",
                "ec2:DescribeHosts"
              ],
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": "autoscaling:CompleteLifecycleAction",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":autoscaling:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":autoScalingGroup:*:autoScalingGroupName/",
                    {
                      "Ref": "arbitrageworkersarbitrageworkersasgASGD8AB35C8"
                    }
                  ]
                ]
              }
            },
            {
              "Action": [
                "ecs:DescribeContainerInstances",
                "ecs:DescribeTasks"
              ],
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "ecs:ListContainerInstances",
                "ecs:SubmitContainerStateChange",
                "ecs:SubmitTaskStateChange"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "arbitrageworkers7033142A",
                  "Arn"
                ]
              }
            },
            {
              "Action": [
                "ecs:UpdateContainerInstancesState",
                "ecs:ListTasks"
              ],
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "arbitrageworkers7033142A",
                      "Arn"
                    ]
                  }
                }
              },
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "arbitrageworkersarbitrageworkersasgDrainECSHookFunctionServiceRoleDefaultPolicyACA808BA",
        "Roles": [
          {
            "Ref": "arbitrageworkersarbitrageworkersasgDrainECSHookFunctionServiceRoleFDC9E155"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "arbitrage-app/arbitrage-workers/arbitrage-workers-asg/DrainECSHook/Function/ServiceRole/DefaultPolicy/Resource"
      }
    },
    "arbitrageworkersarbitrageworkersasgDrainECSHookFunctionD3D653E6": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "import boto3, json, os, time\n\necs = boto3.client('ecs')\nautoscaling = boto3.client('autoscaling')\n\n\ndef lambda_handler(event, context):\n  print(json.dumps(event))\n  cluster = os.environ['CLUSTER']\n  snsTopicArn = event['Records'][0]['Sns']['TopicArn']\n  lifecycle_event = json.loads(event['Records'][0]['Sns']['Message'])\n  instance_id = lifecycle_event.get('EC2InstanceId')\n  if not instance_id:\n    print('Got event without EC2InstanceId: %s', json.dumps(event))\n    return\n\n  instance_arn = container_instance_arn(cluster, instance_id)\n  print('Instance %s has container instance ARN %s' % (lifecycle_event['EC2InstanceId'], instance_arn))\n\n  if not instance_arn:\n    return\n\n  while has_tasks(cluster, instance_arn):\n    time.sleep(10)\n\n  try:\n    print('Terminating instance %s' % instance_id)\n    autoscaling.complete_lifecycle_action(\n        LifecycleActionResult='CONTINUE',\n        **pick(lifecycle_event, 'LifecycleHookName', 'LifecycleActionToken', 'AutoScalingGroupName'))\n  except Exception as e:\n    # Lifecycle action may have already completed.\n    print(str(e))\n\n\ndef container_instance_arn(cluster, instance_id):\n  \"\"\"Turn an instance ID into a container instance ARN.\"\"\"\n  arns = ecs.list_container_instances(cluster=cluster, filter='ec2InstanceId==' + instance_id)['containerInstanceArns']\n  if not arns:\n    return None\n  return arns[0]\n\n\ndef has_tasks(cluster, instance_arn):\n  \"\"\"Return True if the instance is running tasks for the given cluster.\"\"\"\n  instances = ecs.describe_container_instances(cluster=cluster, containerInstances=[instance_arn])['containerInstances']\n  if not instances:\n    return False\n  instance = instances[0]\n\n  if instance['status'] == 'ACTIVE':\n    # Start draining, then try again later\n    set_container_instance_to_draining(cluster, instance_arn)\n    return True\n\n  tasks = instance['runningTasksCount'] + instance['pendingTasksCount']\n  print('Instance %s has %s tasks' % (instance_arn, tasks))\n\n  return tasks > 0\n\n\ndef set_container_instance_to_draining(cluster, instance_arn):\n  ecs.update_container_instances_state(\n      cluster=cluster,\n      containerInstances=[instance_arn], status='DRAINING')\n\n\ndef pick(dct, *keys):\n  \"\"\"Pick a subset of a dict.\"\"\"\n  return {k: v for k, v in dct.items() if k in keys}\n"
        },
        "Handler": "index.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "arbitrageworkersarbitrageworkersasgDrainECSHookFunctionServiceRoleFDC9E155",
            "Arn"
          ]
        },
        "Runtime": "python3.6",
        "Environment": {
          "Variables": {
            "CLUSTER": {
              "Ref": "arbitrageworkers7033142A"
            }
          }
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "arbitrage-app/arbitrage-workers/arbitrage-workers-asg"
          }
        ],
        "Timeout": 310
      },
      "DependsOn": [
        "arbitrageworkersarbitrageworkersasgDrainECSHookFunctionServiceRoleDefaultPolicyACA808BA",
        "arbitrageworkersarbitrageworkersasgDrainECSHookFunctionServiceRoleFDC9E155"
      ],
      "Metadata": {
        "aws:cdk:path": "arbitrage-app/arbitrage-workers/arbitrage-workers-asg/DrainECSHook/Function/Resource"
      }
    },
    "arbitrageworkersarbitrageworkersasgDrainECSHookFunctionAllowInvokearbitrageapparbitrageworkersarbitrageworkersasgLifecycleHookDrainHookTopic4AA69F1AAFA44A3D": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "arbitrageworkersarbitrageworkersasgDrainECSHookFunctionD3D653E6",
            "Arn"
          ]
        },
        "Principal": "sns.amazonaws.com",
        "SourceArn": {
          "Ref": "arbitrageworkersarbitrageworkersasgLifecycleHookDrainHookTopic2C9B5269"
        }
      },
      "Metadata": {
        "aws:cdk:path": "arbitrage-app/arbitrage-workers/arbitrage-workers-asg/DrainECSHook/Function/AllowInvoke:arbitrageapparbitrageworkersarbitrageworkersasgLifecycleHookDrainHookTopic4AA69F1A"
      }
    },
    "arbitrageworkersarbitrageworkersasgDrainECSHookFunctionTopic9E6B3B29": {
      "Type": "AWS::SNS::Subscription",
      "Properties": {
        "Protocol": "lambda",
        "TopicArn": {
          "Ref": "arbitrageworkersarbitrageworkersasgLifecycleHookDrainHookTopic2C9B5269"
        },
        "Endpoint": {
          "Fn::GetAtt": [
            "arbitrageworkersarbitrageworkersasgDrainECSHookFunctionD3D653E6",
            "Arn"
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "arbitrage-app/arbitrage-workers/arbitrage-workers-asg/DrainECSHook/Function/Topic/Resource"
      }
    },
    "arbitrageworkersarbitrageworkersasgLifecycleHookDrainHookRole4BCB2138": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::Join": [
                    "",
                    [
                      "autoscaling.",
                      {
                        "Ref": "AWS::URLSuffix"
                      }
                    ]
                  ]
                }
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Metadata": {
        "aws:cdk:path": "arbitrage-app/arbitrage-workers/arbitrage-workers-asg/LifecycleHookDrainHook/Role/Resource"
      }
    },
    "arbitrageworkersarbitrageworkersasgLifecycleHookDrainHookRoleDefaultPolicyF608D15F": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Ref": "arbitrageworkersarbitrageworkersasgLifecycleHookDrainHookTopic2C9B5269"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "arbitrageworkersarbitrageworkersasgLifecycleHookDrainHookRoleDefaultPolicyF608D15F",
        "Roles": [
          {
            "Ref": "arbitrageworkersarbitrageworkersasgLifecycleHookDrainHookRole4BCB2138"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "arbitrage-app/arbitrage-workers/arbitrage-workers-asg/LifecycleHookDrainHook/Role/DefaultPolicy/Resource"
      }
    },
    "arbitrageworkersarbitrageworkersasgLifecycleHookDrainHookTopic2C9B5269": {
      "Type": "AWS::SNS::Topic",
      "Metadata": {
        "aws:cdk:path": "arbitrage-app/arbitrage-workers/arbitrage-workers-asg/LifecycleHookDrainHook/Topic/Resource"
      }
    },
    "arbitrageworkersarbitrageworkersasgLifecycleHookDrainHookF87FC86F": {
      "Type": "AWS::AutoScaling::LifecycleHook",
      "Properties": {
        "AutoScalingGroupName": {
          "Ref": "arbitrageworkersarbitrageworkersasgASGD8AB35C8"
        },
        "LifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING",
        "DefaultResult": "CONTINUE",
        "HeartbeatTimeout": 300,
        "NotificationTargetARN": {
          "Ref": "arbitrageworkersarbitrageworkersasgLifecycleHookDrainHookTopic2C9B5269"
        },
        "RoleARN": {
          "Fn::GetAtt": [
            "arbitrageworkersarbitrageworkersasgLifecycleHookDrainHookRole4BCB2138",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "arbitrageworkersarbitrageworkersasgLifecycleHookDrainHookRoleDefaultPolicyF608D15F",
        "arbitrageworkersarbitrageworkersasgLifecycleHookDrainHookRole4BCB2138"
      ],
      "Metadata": {
        "aws:cdk:path": "arbitrage-app/arbitrage-workers/arbitrage-workers-asg/LifecycleHookDrainHook/Resource"
      }
    },
    "arbitragebuildsE8D60061": {
      "Type": "AWS::ECR::Repository",
      "Properties": {
        "LifecyclePolicy": {
          "LifecyclePolicyText": "{\"rules\":[{\"rulePriority\":1,\"selection\":{\"tagStatus\":\"tagged\",\"tagPrefixList\":[\"prod\"],\"countType\":\"imageCountMoreThan\",\"countNumber\":100},\"action\":{\"type\":\"expire\"}},{\"rulePriority\":2,\"selection\":{\"tagStatus\":\"any\",\"countType\":\"sinceImagePushed\",\"countNumber\":30,\"countUnit\":\"days\"},\"action\":{\"type\":\"expire\"}}]}"
        }
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "aws:cdk:path": "arbitrage-app/arbitrage-builds/Resource"
      }
    },
    "arbitragetaskTaskRole9670085C": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::Join": [
                    "",
                    [
                      "ecs-tasks.",
                      {
                        "Ref": "AWS::URLSuffix"
                      }
                    ]
                  ]
                }
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Metadata": {
        "aws:cdk:path": "arbitrage-app/arbitrage-task/TaskRole/Resource"
      }
    },
    "arbitragetaskFB4CC0D7": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "ContainerDefinitions": [
          {
            "Essential": true,
            "Image": "amazon/amazon-ecs-sample",
            "Links": [],
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "arbitragetaskarbitragecontainerLogGroupE341ED4C"
                },
                "awslogs-stream-prefix": "arbitrage-logs",
                "awslogs-region": {
                  "Ref": "AWS::Region"
                }
              }
            },
            "Memory": 512,
            "MountPoints": [],
            "Name": "arbitrage-container",
            "PortMappings": [],
            "Ulimits": [],
            "VolumesFrom": []
          }
        ],
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "arbitragetaskExecutionRoleC58BCF13",
            "Arn"
          ]
        },
        "Family": "arbitrageapparbitragetask12470158",
        "NetworkMode": "bridge",
        "RequiresCompatibilities": [
          "EC2"
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "arbitragetaskTaskRole9670085C",
            "Arn"
          ]
        },
        "Volumes": []
      },
      "Metadata": {
        "aws:cdk:path": "arbitrage-app/arbitrage-task/Resource"
      }
    },
    "arbitragetaskarbitragecontainerLogGroupE341ED4C": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "RetentionInDays": 1
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "aws:cdk:path": "arbitrage-app/arbitrage-task/arbitrage-container/LogGroup/Resource"
      }
    },
    "arbitragetaskExecutionRoleC58BCF13": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::Join": [
                    "",
                    [
                      "ecs-tasks.",
                      {
                        "Ref": "AWS::URLSuffix"
                      }
                    ]
                  ]
                }
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Metadata": {
        "aws:cdk:path": "arbitrage-app/arbitrage-task/ExecutionRole/Resource"
      }
    },
    "arbitragetaskExecutionRoleDefaultPolicy51F4E7BB": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "arbitragetaskarbitragecontainerLogGroupE341ED4C",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "arbitragetaskExecutionRoleDefaultPolicy51F4E7BB",
        "Roles": [
          {
            "Ref": "arbitragetaskExecutionRoleC58BCF13"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "arbitrage-app/arbitrage-task/ExecutionRole/DefaultPolicy/Resource"
      }
    },
    "arbitrageserviceServiceBB6CC91A": {
      "Type": "AWS::ECS::Service",
      "Properties": {
        "TaskDefinition": {
          "Ref": "arbitragetaskFB4CC0D7"
        },
        "Cluster": {
          "Ref": "arbitrageworkers7033142A"
        },
        "DeploymentConfiguration": {
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 50
        },
        "DesiredCount": 1,
        "LaunchType": "EC2",
        "LoadBalancers": [],
        "SchedulingStrategy": "REPLICA",
        "ServiceRegistries": []
      },
      "Metadata": {
        "aws:cdk:path": "arbitrage-app/arbitrage-service/Service"
      }
    },
    "sendexchangepairsDCE4F569": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "DisplayName": "Combine all known exchange in pairs",
        "TopicName": "send-exchange-pairs"
      },
      "Metadata": {
        "aws:cdk:path": "arbitrage-app/send-exchange-pairs/Resource"
      }
    },
    "sendexchangepairsPolicyA1F515A0": {
      "Type": "AWS::SNS::TopicPolicy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::Join": [
                    "",
                    [
                      "events.",
                      {
                        "Ref": "AWS::URLSuffix"
                      }
                    ]
                  ]
                }
              },
              "Resource": {
                "Ref": "sendexchangepairsDCE4F569"
              },
              "Sid": "0"
            }
          ],
          "Version": "2012-10-17"
        },
        "Topics": [
          {
            "Ref": "sendexchangepairsDCE4F569"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "arbitrage-app/send-exchange-pairs/Policy/Resource"
      }
    },
    "dispatchwithcommonsymbolsA7E88A9B": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "DisplayName": "Dispatch common symbols to be assessed",
        "TopicName": "dispatch-with-common-symbols"
      },
      "Metadata": {
        "aws:cdk:path": "arbitrage-app/dispatch-with-common-symbols/Resource"
      }
    },
    "assessarbitrageopportunity025DA179": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "DisplayName": "Assess arbitrage opportunity",
        "TopicName": "assess-arbitrage-opportunity"
      },
      "Metadata": {
        "aws:cdk:path": "arbitrage-app/assess-arbitrage-opportunity/Resource"
      }
    },
    "arbitragecron829B96B3": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(0 * * ? * *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Ref": "sendexchangepairsDCE4F569"
            },
            "Id": "Target0"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "arbitrage-app/arbitrage-cron/Resource"
      }
    }
  },
  "Parameters": {
    "SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter": {
      "Type": "AWS::SSM::Parameter::Value<String>",
      "Default": "/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id"
    }
  }
}